// -- Base constants
#define constant MAINNET_CHAIN_ID = 0x01 // Main deployment will be on Ethereum
#define constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

// -- Selector Switch Constants
#define constant DEST_SEQ = 0x2fb000000000000059c00000000000006a300000000000009300
#define constant S_MASK = 0x31c00000 // => 00110001110000000000000000000000
#define constant S_SHIFT = 0x16 // 22
#define constant DEST_MASK = 0x1f0

// -- Base Contracts
/// @dev Non zero slot allows for the omission of zero checks in certain view methods (e.g. `balanceOf`)
/// @notice Determined via keccak256("YAM_WETH.totalSupply") - 1
#define constant TOTAL_SUPPLY_SLOT = 0xd56ede8fae84e89fcc30c580c1e75530f248a337be6f2dd2c582e96a7859b532
#define constant BALANCE_MASK = 0xffffffffffffffffffffffffffffffff
#define constant NONCE_SHIFT = 0x80
#define constant NONCE_INCREMENT = 0x0100000000000000000000000000000000
#define constant DECIMALS = 0x12 // 18

// -- ABI Constants
// ---- Functions
// ---- Functions -- Metadata
#define function name() view returns (string)
#define function symbol() view returns (string)
#define function decimals() view returns (uint8)
// ---- Functions -- Global
#define function totalSupply() view returns (uint256)
// ---- Functions -- Transfer
#define function transferFrom(address,address,uint256) payable returns (bool)
#define function transfer(address, uint256) payable returns (bool)
#define function balanceOf(address) view returns (uint256)
// ---- Functions -- Allowance
#define function approve(address,uint256) payable returns (bool)
#define function allowance(address, address) view returns (uint256)
// ---- Functions -- ERC2612 Permits
#define function DOMAIN_SEPARATOR() view returns (bytes32)
#define function nonces(address) view returns (uint256)
#define function permit(address, address, uint256, uint256, uint8, bytes32, bytes32) payable returns ()
// ---- Functions -- Utility
#define function multicall(bytes[]) payable returns (bytes[])
// ---- Functions -- Wrap
#define function deposit() payable returns ()
#define function depositTo(address) payable returns ()
#define function depositAmountTo(address, uint256) payable returns ()
#define function depositAmount(uint256) payable returns ()
// ---- Functions -- Unwrap
#define function withdraw(uint256) payable returns ()
#define function withdrawTo(address, uint256) payable returns ()
#define function withdrawFrom(address, uint256) payable returns ()
#define function withdrawFromTo(address, address, uint256) payable returns ()

// ---- Events
#define event Transfer(address indexed, address indexed, uint256)
#define event Approval(address indexed, address indexed, uint256)

// ---- Errors
#define error InsufficientBalance()
#define error InsufficientAllowance()
#define error InsufficientFreeBalance()
#define error PermitExpired()
#define error InvalidSignature()

// -- ERC712 Constants
// keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)")
#define constant ERC712_DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f
#define constant NAME_HASH = 0x71ad9062969277156f043087ef6affb03325435a01d7a4ba510de93ca3859a76
#define constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6
#define constant CACHED_DOMAIN_SEPARATOR = 0xd00d00d00d00d00d00d00d00d00d00d00d00d00d00d00d00d00d00d00d00d001

// keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)")
#define constant PERMIT_TYPE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9


// -- Utility Functions
#define macro BRANCHLESS_ASSERT_ZERO() = takes(1) returns(0) {
    // takes:    [cond]
    returndatasize returndatasize returndatacopy
}

#define macro REQUIRE_ADDRESS() = takes(1) returns(0) {
    // takes:        [addr]
    dup1 0xffffffffffffffffffffffffffffffffffffffff and  // [uint160(addr), addr]
    dup2 iszero                                          // [addr == 0, uint160(addr), addr]
    swap2 sub                                            // [uint160(addr) - addr, addr == 0]
    or BRANCHLESS_ASSERT_ZERO()
}

#define macro LOAD_ADDRESS() = takes(1) returns(1) {
    // takes:         [calldata_pos]
    calldataload   // [addr]
    dup1 REQUIRE_ADDRESS()
    // returns:    // [addr] 
}

#define macro REVERT(zero) = takes(1) returns(0) {
    <zero> mstore
    0x04 0x1c return
}

#define macro RETURN_WORD(zero) = takes(1) returns(0) {
    // takes:             [x]
    <zero> mstore      // []
    0x20 <zero> return // []
}

#define macro RETURN_TRUE(zero) = takes(0) returns(0) {
    0x1 RETURN_WORD(<zero>)
}

#define macro BUBBLE_REVERT(zero) = takes(1) returns(0) {
    // takes:             [success]
    no_bubble jumpi
        returndatasize <zero> <zero> returndatacopy
        returndatasize <zero> revert
    no_bubble:
}

#define macro NO_VALUE() = takes(0) returns(0) {
    callvalue empty_revert jumpi
}

#define macro SEND_ETH_TO_CALLER(zero, zero2) = takes(1) returns(0) {
    // takes:                      [amount]

    <zero> <zero> <zero> <zero> // [0, 0, 0, 0, amount]
    swap4 caller gas            // [gas, msg.sender, amount, 0, 0, 0, 0]
    call                        // [success]
    BUBBLE_REVERT(<zero2>)       // []

    // returns:                    []
}

#define macro SEND_ETH(zero, zero2) = takes(2) returns(0) {
    // takes:        [amount, recipient]

    <zero> <zero> // [0, 0, amount, recipient]
    <zero>        // [0, 0, 0, amount, recipient]
    swap3         // [amount, 0, 0, 0, recipient]
    <zero>        // [0, amount, 0, 0, 0, recipient]
    swap5         // [recipient, amount, 0, 0, 0, 0]
    gas call      // [success]
    BUBBLE_REVERT(<zero2>)
}

// -- External Functions
// ---- Metadata / Global Methods
#define macro _NAME_EXTERNAL(zero) = takes(0) returns(0) {
    // "Yet Another Maximized Wrapped Ether Contract" (len: 44)
    0x7468657220436f6e7472616374 0x4c mstore
    0x2c59657420416e6f74686572204d6178696d697a656420577261707065642045 0x3f mstore
    0x20 <zero> mstore
    msize <zero> return
}

#define macro _SYMBOL_EXTERNAL(zero) = takes(0) returns(0) {
    // "WETH"
    0x0457455448 0x24 mstore
    0x20 <zero> mstore
    msize <zero> return
}

#define macro _DECIMALS_EXTERNAL(zero) = takes(0) returns(0) {
    [DECIMALS] RETURN_WORD(<zero>)
}

#define macro _TOTAL_SUPPLY_EXTERNAL(zero) = takes(0) returns(0) {
    [TOTAL_SUPPLY_SLOT] sload RETURN_WORD(<zero>)
}

#define macro LOAD_BALANCE() = takes(1) returns(1) {
    sload [BALANCE_MASK] and
}

// ---- Transfer related methods
#define macro _BALANCE_OF_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 LOAD_ADDRESS()     // [account]
    LOAD_BALANCE()          // [account.bal]
    RETURN_WORD(<zero>)
}

#define macro TRANSFER(zero) = takes(5) returns(0) {
    // takes:             [from, amount, amount, from, to]

    // -- Update `from` Balance
    sload dup1         // [from.data, from.data, amount, amount, from, to]
    [BALANCE_MASK] and // [from.bal, from.data, amount, amount, from, to]
    dup3               // [amount, from.bal, from.data, amount, amount, from, to]
    gt insufficient_bal_error jumpi
    //                    [from.data, amount, amount, from, to]
    sub                // [from.data', amount, from, to]
    dup3 sstore        // [amount, from, to]

    // -- Update `to` Balance
    dup3 sload         // [to.data, amount, from, to]
    dup2 add           // [to.data', amount, from, to]
    dup4 sstore        // [amount, from, to]

    // -- Emit `Transfer`
    <zero> mstore      // [from, to]
    __EVENT_HASH(Transfer)
    //                    [Transfer.sig, from, to]
    0x20 <zero> log3   // []
}

#define macro _TRANSFER_EXTERNAL(zero) = takes(0) returns(0) {
    // -- Load & Verify Params
    0x04 LOAD_ADDRESS() // [to]
    caller              // [msg.sender, to]
    0x24 calldataload   // [amount, msg.sender, to]

    // -- Transfer
    dup1 caller         // [msg.sender, amount, amount, msg.sender, to]
    TRANSFER(<zero>)

    RETURN_TRUE(<zero>)
}

#define macro _APPROVE_EXTERNAL(zero) = takes(0) returns(0) {
    // -- Load & Verify Params
    0x04 LOAD_ADDRESS()    // [spender]
    0x24 calldataload      // [amount, spender]

    // -- Store approval
    caller <zero> mstore   // [amount, spender]
    dup2    0x20  mstore   // [amount, spender]
    dup1                   // [amount, amount, spender]
    0x40 <zero> sha3       // [allowance.slot, amount, amount, spender]
    sstore                 // [amount, spender]

    // -- Emit Event
    <zero> mstore          // [spender]
    caller                 // [owner, spender]
    __EVENT_HASH(Approval) // [Approval.sig, owner, spender]
    0x20 <zero> log3       // []

    RETURN_TRUE(<zero>)
}

#define macro _ALLOWANCE_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 calldataload // [owner]
    0x24 calldataload // [spender, owner]
    dup2 dup2 or REQUIRE_ADDRESS()
     0x20  mstore     // [owner]
    <zero> mstore     // []
    0x40 <zero> sha3  // [allowance.slot]
    sload             // [allowance]
    <zero> mstore     // []
    0x20 <zero> return
}


// Actually "returns" 4 if jumping to `use_allowance_2pop`
/// @dev Checks and updates `from`'s allowance to caller
#define macro USE_ALLOWANCE(zero, use_allowance_2pop) = takes(2) returns(2) {
    // takes:             [amount, from]
    dup2 <zero> mstore // [amount, from]
    caller 0x20 mstore // [amount, from]
    0x40 <zero> sha3   // [allowance.slot, amount, from]
    dup1 sload         // [allowance, allowance.slot, amount, from]
    dup1 [MAX_UINT] eq <use_allowance_2pop> jumpi
    //                    [allowance, allowance.slot, amount, from]
    dup1 dup4          // [amount, allowance, allowance, allowance.slot, amount, from]
    gt insufficient_allowance_error jumpi
    //                    [allowance, allowance.slot, amount, from]
    dup3 swap1 sub     // [allowance', allowance.slot, amount, from]
    swap1 sstore       // [amount, from]
}

#define macro TRANSFER_FROM_END(zero) = takes(3) returns(0) {
    // takes:             [amount, from, to]
    dup1 dup3          // [from, amount, amount, from, to]
    TRANSFER(<zero>)   // []
    RETURN_TRUE(<zero>)
}

#define macro _TRANSFER_FROM_EXTERNAL(zero) = takes(0) returns(0) {
    // -- Load & Do Param Verification
    0x24 calldataload  // [to]
    0x04 calldataload  // [from, to]
    0x44 calldataload  // [amount, from, to]
    dup3 dup3 or REQUIRE_ADDRESS()
    //                    [amount, from, to]

    // -- Verify Allowance
    USE_ALLOWANCE(<zero>, transfer_from_allowed_2pop)
        //                  [amount, from, to]
        TRANSFER_FROM_END(<zero>)
    transfer_from_allowed_2pop:
        //                [_, _, amount, from, to]
        pop pop        // [amount, from, to]
        TRANSFER_FROM_END(<zero>)
}

#define macro _DEPOSIT_EXTERNAL(zero) = takes(0) returns(0) {
    [TOTAL_SUPPLY_SLOT] // [total_supply.slot]
    dup1 sload          // [total_supply, total_supply.slot]
    selfbalance sub     // [amount, total_supply.slot]
    dup1                // [amount, amount, total_supply.slot]
    caller sload        // [msg.sender.bal, amount, amount, total_supply.slot]
    add                 // [msg.sender.bal', amount, total_supply.slot]
    caller sstore       // [amount, total_supply.slot]

    // -- Emit Transfer
    <zero> mstore       // [total_supply.slot]
    caller <zero> __EVENT_HASH(Transfer)
    //                     [Transfer.sig, 0, msg.sender, total_supply.slot]
    0x20 <zero> log3    // [total_supply.slot]

    // -- Update Total Supply
    selfbalance swap1   // [total_supply.slot, this.balance]
    sstore              // []

    stop
}

#define macro _DEPOSIT_TO_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 LOAD_ADDRESS() // [recipient]

    [TOTAL_SUPPLY_SLOT] // [total_supply.slot, recipient]
    dup1 sload          // [total_supply, total_supply.slot, recipient]
    selfbalance sub     // [amount, total_supply.slot, recipient]
    dup1                // [amount, amount, total_supply.slot, recipient]
    dup4 sload          // [recipient.bal, amount, amount, total_supply.slot, recipient]
    add                 // [recipient.bal', amount, total_supply.slot, recipient]
    dup4 sstore         // [amount, total_supply.slot, recipient]

    // -- Emit Transfer
    <zero> mstore       // [total_supply.slot, recipient]
    swap1 <zero> __EVENT_HASH(Transfer)
    //                     [Transfer.sig, 0, recipient, total_supply.slot]
    0x20 <zero> log3    // [total_supply.slot]

    // -- Update Total Supply
    selfbalance swap1   // [total_supply.slot, this.balance]
    sstore              // []

    stop
}

#define macro _DEPOSIT_AMOUNT_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 calldataload   // [amount]

    // -- Verify `amount` Against Free Balance
    [TOTAL_SUPPLY_SLOT] // [total_supply.slot, amount]
    dup1 sload          // [total_supply, total_supply.slot, amount]
    dup1                // [total_supply, total_supply, total_supply.slot, amount]
    selfbalance sub     // [avail_amount, total_supply, total_supply.slot, amount]

    dup4                // [amount, avail_amount, total_supply, total_supply.slot, amount]
    gt insufficent_free_balance_error jumpi
    //                     [total_supply, total_supply.slot, amount]

    // -- Update Caller's Balance
    caller sload        // [msg.sender.bal, total_supply, total_supply.slot, amount]
    dup4 add            // [msg.sender.bal', total_supply, total_supply.slot, amount]
    caller sstore       // [total_supply, total_supply.slot, amount]

    // -- Update Total Supply
    dup3                // [amount, total_supply, total_supply.slot, amount]
    add                 // [total_supply', total_supply.slot, amount]
    swap1 sstore        // [amount]

    // -- Emit Transfer Event
    <zero> mstore       // []
    caller <zero> __EVENT_HASH(Transfer)
    //                     [Transfer.sig, 0, msg.sender]
    0x20 <zero> log3    // []

    stop
}

#define macro _DEPOSIT_AMOUNT_TO_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 LOAD_ADDRESS() // [to]
    0x24 calldataload   // [amount, to]

    // -- Verify `amount` Against Free Balance
    [TOTAL_SUPPLY_SLOT] // [total_supply.slot, amount, to]
    dup1 sload          // [total_supply, total_supply.slot, amount, to]
    dup1                // [total_supply, total_supply, total_supply.slot, amount, to]
    selfbalance sub     // [avail_amount, total_supply, total_supply.slot, amount, to]

    dup4                // [amount, avail_amount, total_supply, total_supply.slot, amount, to]
    gt insufficent_free_balance_error jumpi
    //                     [total_supply, total_supply.slot, amount, to]

    // -- Update Caller's Balance
    dup4 sload          // [to.data, total_supply, total_supply.slot, amount, to]
    dup4 add            // [to.data', total_supply, total_supply.slot, amount, to]
    dup5 sstore         // [total_supply, total_supply.slot, amount, to]

    // -- Update Total Supply
    dup3                // [amount, total_supply, total_supply.slot, amount, to]
    add                 // [total_supply', total_supply.slot, amount, to]
    swap1 sstore        // [amount, to]

    // -- Emit Transfer Event
    <zero> mstore       // [to]
    <zero> __EVENT_HASH(Transfer)
    //                     [Transfer.sig, 0, to]
    0x20 <zero> log3    // []

    stop
}

#define macro BURN_FROM_CALLER(zero) = takes(1) returns(0) {
    // takes:                [amount]

    // -- Update Balance
    dup1                  // [amount, amount]
    caller sload          // [msg.sender.data, amount, amount]
    dup1                  // [msg.sender.data, msg.sender.data, amount, amount]
    [BALANCE_MASK] and    // [msg.sender.bal, msg.sender.data, amount, amount]
    dup3                  // [amount, msg.sender.bal, msg.sender.data, amount, amount]
    gt insufficient_bal_error jumpi
    //                       [msg.sender.data, amount, amount]
    sub                   // [msg.sender.data', amount]
    caller sstore         // [amount]

    // -- Update Total Supply
    [TOTAL_SUPPLY_SLOT]   // [total_supply.slot, amount]
    dup2 dup2             // [total_supply.slot, amount, total_supply.slot, amount]
    sload sub             // [total_supply', total_supply.slot, amount]
    swap1 sstore          // [amount]

    // -- Emit Transfer
    <zero> mstore         // [amount]
    <zero> caller __EVENT_HASH(Transfer)
    //                       [Transfer.sig, msg.sender, 0]
    0x20 <zero> log3      // []

    // returns:              []
}

#define macro _WITHDRAW_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 calldataload                // [amount]
    dup1                             // [amount, amount]
    BURN_FROM_CALLER(<zero>)         // [amount]
    SEND_ETH_TO_CALLER(<zero>, 0x00) // []
    stop
}

#define macro _WITHDRAW_TO_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 LOAD_ADDRESS()           // [recipient]
    0x24 calldataload             // [amount, recipient]
    dup1 BURN_FROM_CALLER(<zero>) // [amount, recipient]
    SEND_ETH(<zero>, 0x00)
    stop
}

#define macro BURN_FROM(zero) = takes(2) returns(0) {
    // takes:                [amount, from]

    // -- Update Balance
    dup1                  // [amount, amount, from]
    dup3 sload            // [from.data, amount, amount, from]
    dup1                  // [from.data, from.data, amount, amount]
    [BALANCE_MASK] and    // [from.bal, from.data, amount, amount]
    dup3                  // [amount, from.bal, from.data, amount, amount]
    gt insufficient_bal_error jumpi
    //                       [from.data, amount, amount, from]
    sub                   // [from.data', amount, from]
    dup3 sstore           // [amount, from]

    // -- Update Total Supply
    [TOTAL_SUPPLY_SLOT]   // [total_supply.slot, amount, from]
    dup2 dup2             // [total_supply.slot, amount, total_supply.slot, amount, from]
    sload sub             // [total_supply', total_supply.slot, amount, from]
    swap1 sstore          // [amount, from]

    // -- Emit Transfer
    <zero> mstore         // [from]
    <zero> swap1 __EVENT_HASH(Transfer)
    //                       [Transfer.sig, from, 0]
    0x20 <zero> log3      // []

    // returns:              []
}

#define macro WITHDRAW_FROM_END(zero, zero2) = takes(3) returns(0) {
    // takes:                              [amount, from, amount]

    BURN_FROM(<zero>)                   // [amount]
    SEND_ETH_TO_CALLER(<zero>, <zero2>) // []
    stop
}

#define macro _WITHDRAW_FROM_EXTERNAL(zero) = takes(0) returns(0) {
    0x24 calldataload       // [amount]
    0x04 LOAD_ADDRESS()     // [from, amount]
    dup2                    // [amount, from, amount]

    USE_ALLOWANCE(<zero>, withdraw_from_allowed_2pop)
        //                     [amount, from, amount]
        WITHDRAW_FROM_END(<zero>, 0x00)
    withdraw_from_allowed_2pop:
        //                     [_, _, amount, from, amount]
        pop pop             // [amount, from, amount]
        WITHDRAW_FROM_END(<zero>, 0x00)
}

#define macro WITHDRAW_FROM_TO_END(zero, zero2) = takes(4) returns(0) {
    // takes:                              [amount, from, amount, to]

    BURN_FROM(<zero>)                   // [amount, to]
    SEND_ETH(<zero>, <zero2>)           // []
    stop
}

#define macro _WITHDRAW_FROM_TO_EXTERNAL(zero) = takes(0) returns(0) {
    0x24 calldataload       // [to]
    0x44 calldataload       // [amount, to]
    0x04 calldataload       // [from, amount, to]
    dup3 dup2 or REQUIRE_ADDRESS()
    //                         [from, amount, to]
    dup2                    // [amount, from, amount, to]

    USE_ALLOWANCE(<zero>, withdraw_from_to_allowed_2pop)
        //                     [amount, from, amount, to]
        WITHDRAW_FROM_TO_END(<zero>, 0x00)
    withdraw_from_to_allowed_2pop:
        //                     [_, _, amount, from, amount, to]
        pop pop             // [amount, from, amount, to]
        WITHDRAW_FROM_TO_END(<zero>, 0x00)
}

#define macro IS_FORK() = takes(0) returns(1) {
    [MAINNET_CHAIN_ID] chainid sub
}

#define macro _DOMAIN_SEPARATOR_EXTERNAL(zero) = takes(0) returns(0) {
    IS_FORK() BRANCHLESS_ASSERT_ZERO()
    [CACHED_DOMAIN_SEPARATOR] RETURN_WORD(<zero>)
}

#define macro _NONCES_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 LOAD_ADDRESS() // [account]
    sload               // [account.data]
    [NONCE_SHIFT] shr   // [account.nonce]
    RETURN_WORD(<zero>)
}

#define macro _PERMIT_EXTERNAL(zero) = takes(0) returns(0) {
    0x04 calldataload                // [owner]
    0x24 calldataload                // [spender, owner]
    dup2 dup2 or REQUIRE_ADDRESS()
    0x44 calldataload                // [allowance, spender, owner]
    0x64 calldataload                // [deadline, allowance, spender, owner]

    dup1 timestamp gt                // [block.timestamp > deadline, deadline, allowance, spender, owner]
    permit_expired_error jumpi       // [deadline, allowance, spender, owner]

    // -- Prepare Basic Permit Params
    [PERMIT_TYPE_HASH] <zero> mstore // [deadline, allowance, spender, owner]
    dup4                0x20  mstore // [deadline, allowance, spender, owner]
    dup3                0x40  mstore // [deadline, allowance, spender, owner]
    dup2                0x60  mstore // [deadline, allowance, spender, owner]
    /***/               0xa0  mstore // [allowance, spender, owner]

    // -- Prepare and Update Nonce
    dup3 sload                       // [owner.data, allowance, spender, owner]
    dup1 [NONCE_SHIFT] shr           // [owner.nonce, owner.data, allowance, spender, owner]
    /***/               0x80  mstore // [owner.data, allowance, spender, owner]
    [NONCE_INCREMENT] add            // [owner.data', allowance, spender, owner]
    dup4 sstore                      // [allowance, spender, owner]

    // -- Update Allowance
    0x40 0x20 sha3                   // [allowance.slot, allowance, spender, owner]
    sstore                           // [spender, owner]
    dup2 __EVENT_HASH(Approval)      // [Approval.sig, owner, spender, owner]
    0x20 0x60 log3                   // [owner]

    // -- Calculate Message Hash
    0xc0 <zero> sha3                 // [permit_struct_hash, owner]
    0x1901 <zero> mstore             // [permit_struct_hash, owner]
    [CACHED_DOMAIN_SEPARATOR] 0x20 mstore
    //                                  [permit_struct_hash, owner]
    0x40 mstore                      // [owner]
    0x42 0x1e sha3                   // [encoded_struct, owner]

    // -- Verify Signature
    <zero> mstore                    // [owner]
    // Copy v, r, s at once into memory.
    0x60 0x84 0x20 calldatacopy      // [owner]

    0x20 <zero> 0x80 <zero>          // [0, 0x80, 0, 0x20, owner]
    chainid gas staticcall           // [success, owner]
    pop                              // [owner]
    <zero> mload                     // [recovered_signer, owner]
    sub                              // [owner != recovered_signer]
    // Revert if fork or signature didn't match.
    // If `ecrecover` fails message hash in 0x00 is not overwritten, successful bypass would
    // require collision between owner address and the encoded struct hash.
    IS_FORK() or invalid_signature_error jumpi
    //                                  []
    stop
}
#define macro COMPUTE_ERC712_DOMAIN_SEPARATOR(zero) = takes(0) returns(1) {
    [ERC712_DOMAIN_HASH] <zero> mstore
    [NAME_HASH]           0x20  mstore
    [VERSION_HASH]        0x40  mstore
    chainid               0x60  mstore
    address               0x80  mstore
    0xa0 <zero> sha3
}

#define macro CONSTRUCTOR() = takes(0) returns(0) {
    // Check that placeholder domain separator was replaced and correctly computed
        COMPUTE_ERC712_DOMAIN_SEPARATOR(returndatasize) [CACHED_DOMAIN_SEPARATOR] sub
        IS_FORK()
    or
    BRANCHLESS_ASSERT_ZERO()
}

#define macro SELECTOR(zero) = takes(0) returns(1) {
    <zero> calldataload 0xe0 shr
}

#define macro FUNC_CHECK(selector, final_dest) = takes(1) returns(0) {
    <selector> eq <final_dest> jumpi
    returndatasize returndatasize revert
    // Padding to make sure block is 16 bytes large (including JUMPDEST).
    stop stop
}

#define macro NO_MATCH() = takes(0) returns(0) {
    returndatasize returndatasize revert
    // Padding to make sure block is 16 bytes large (including JUMPDEST).
    stop stop stop stop stop stop stop stop stop stop stop stop
}

#define macro RECEIVE_CHECK(deposit_dest) = takes(0) returns(0) {
    calldatasize iszero <deposit_dest> jumpi
    returndatasize returndatasize revert
    // Padding to make sure block is 16 bytes large (including JUMPDEST).
    stop stop stop stop stop stop
}

#define macro _MAIN(zero) = takes(0) returns(0) {
    // -- Selector Switch Head
    // Since the switch is exactly 48 bytes large no padding is required
    SELECTOR(<zero>)     // [sel]
    [DEST_SEQ]          // [lab_seq, sel]
    dup2 [S_MASK] and   // [unique_sel_bits, lab_seq, sel]
    [S_SHIFT] shr       // [i, lab_seq, sel]
    shr [DEST_MASK] and // [dest, sel]
    jump

    // The `JUMPDEST` bytes will be at the positions of the label.
    // Selector comparison necessary to protect against collisions with other functions.
    dest_0x030: FUNC_CHECK(0x18160ddd, totalSupply_final_dest)
    dest_0x040: NO_MATCH()
    dest_0x050: NO_MATCH()
    dest_0x060: FUNC_CHECK(0x06fdde03, name_final_dest)
    dest_0x070: FUNC_CHECK(0xac9650d8, multicall_final_dest)
    dest_0x080: NO_MATCH()
    dest_0x090: FUNC_CHECK(0x095ea7b3, approve_final_dest)
    dest_0x0a0: FUNC_CHECK(0xd505accf, permit_final_dest)
    dest_0x0b0: NO_MATCH()
    dest_0x0c0: NO_MATCH()
    dest_0x0d0: FUNC_CHECK(0x95d89b41, symbol_final_dest)
    dest_0x0e0: FUNC_CHECK(0x205c2878, withdrawTo_final_dest)
    dest_0x0f0: FUNC_CHECK(0x313ce567, decimals_final_dest)
    dest_0x100: RECEIVE_CHECK(deposit_final_dest)
    dest_0x110: FUNC_CHECK(0x9470b0bd, withdrawFrom_final_dest)
    dest_0x120: FUNC_CHECK(0x87f8ab26, depositAmount_final_dest)
    dest_0x130: NO_MATCH()
    dest_0x140: FUNC_CHECK(0xd0e30db0, deposit_final_dest)
    dest_0x150: FUNC_CHECK(0xdd62ed3e, allowance_final_dest)
    dest_0x160: FUNC_CHECK(0x23b872dd, transferFrom_final_dest)
    dest_0x170: FUNC_CHECK(0xb760faf9, depositTo_final_dest)
    dest_0x180: FUNC_CHECK(0x4a4089cc, withdrawFromTo_final_dest)
    dest_0x190: FUNC_CHECK(0xa9059cbb, transfer_final_dest)
    dest_0x1a0: NO_MATCH()
    dest_0x1b0: FUNC_CHECK(0xb2069e40, depositAmountTo_final_dest)
    dest_0x1c0: FUNC_CHECK(0x2e1a7d4d, withdraw_final_dest)
    dest_0x1d0: FUNC_CHECK(0x3644e515, DOMAIN_SEPARATOR_final_dest)
    dest_0x1e0: FUNC_CHECK(0x70a08231, balanceOf_final_dest)
    dest_0x1f0: FUNC_CHECK(0x7ecebe00, nonces_final_dest)

    // Final function destinations.
    name_final_dest:
        _NAME_EXTERNAL(<zero>)
    symbol_final_dest:
        _SYMBOL_EXTERNAL(<zero>)
    decimals_final_dest:
        _DECIMALS_EXTERNAL(<zero>)
    totalSupply_final_dest:
        _TOTAL_SUPPLY_EXTERNAL(<zero>)
    transferFrom_final_dest:
        _TRANSFER_FROM_EXTERNAL(<zero>)
    transfer_final_dest:
        _TRANSFER_EXTERNAL(<zero>)
    balanceOf_final_dest:
        _BALANCE_OF_EXTERNAL(<zero>)
    approve_final_dest:
        _APPROVE_EXTERNAL(<zero>)
    allowance_final_dest:
        _ALLOWANCE_EXTERNAL(<zero>)
    deposit_final_dest:
        _DEPOSIT_EXTERNAL(<zero>)
    depositTo_final_dest:
        _DEPOSIT_TO_EXTERNAL(<zero>)
    depositAmount_final_dest:
        _DEPOSIT_AMOUNT_EXTERNAL(<zero>)
    depositAmountTo_final_dest:
        _DEPOSIT_AMOUNT_TO_EXTERNAL(<zero>)
    withdraw_final_dest:
        _WITHDRAW_EXTERNAL(<zero>)
    withdrawTo_final_dest:
        _WITHDRAW_TO_EXTERNAL(<zero>)
    withdrawFrom_final_dest:
        _WITHDRAW_FROM_EXTERNAL(<zero>)
    withdrawFromTo_final_dest:
        _WITHDRAW_FROM_TO_EXTERNAL(<zero>)
    DOMAIN_SEPARATOR_final_dest:
        _DOMAIN_SEPARATOR_EXTERNAL(<zero>)
    nonces_final_dest:
        _NONCES_EXTERNAL(<zero>)
    permit_final_dest:
        _PERMIT_EXTERNAL(<zero>)
    multicall_final_dest:
        _MULTICALL_EXTERNAL(<zero>)

    // Errors.
    insufficient_bal_error:
        __FUNC_SIG(InsufficientBalance)     REVERT(<zero>)
    insufficient_allowance_error:
        __FUNC_SIG(InsufficientAllowance)   REVERT(<zero>)
    insufficent_free_balance_error:
        __FUNC_SIG(InsufficientFreeBalance) REVERT(<zero>)
    permit_expired_error:
        __FUNC_SIG(PermitExpired)           REVERT(<zero>)
    invalid_signature_error:
        __FUNC_SIG(InvalidSignature)        REVERT(0x00)
}

#define macro MAIN() = takes(0) returns(0) {
  _MAIN(returndatasize)
}
