#include "./interfaces/IMETH.huff"

////////////////////////////////////////////////////////////////
//                   BASE CONSTANTS                           //
////////////////////////////////////////////////////////////////
/// @notice If changed for alternative chain, replace use of `CHAINID` as "push 1" in `permit`.
#define constant TARGET_CHAIN_ID = 0x01 // Main deployment will be on Ethereum
#define constant INF_ALLOW_LIM = 0xfeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define constant MAX_ADDR = 0xffffffffffffffffffffffffffffffffffffffff

////////////////////////////////////////////////////////////////
//               CONSTRUCTOR PARAMETERS                       //
////////////////////////////////////////////////////////////////
/// TODO: Set
#define constant DS_LOC1 = 0x1733
/// TODO: Set
#define constant DS_LOC2 = 0x1810

////////////////////////////////////////////////////////////////
//             SELECTOR SWITCH CONSTANTS                      //
////////////////////////////////////////////////////////////////
/// @dev Right bit shift that retrieves the unique upper bits of all selectors contained within the ABI.
#define constant S_SHIFT = 0x14 // 20
#define constant S_COVER = 0x0f // 15 (1111_2)

////////////////////////////////////////////////////////////////
//              STORAGE LAYOUT CONSTANTS                      //
////////////////////////////////////////////////////////////////
/// @dev Non zero slot allows for the omission of zero checks in certain view methods (e.g. `balanceOf`)
#define constant BALANCE_MASK    = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
#define constant NONCE_MASK      = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
#define constant NONCE_INCREMENT = 0x0000000000000000000000000000000100000000000000000000000000000000
#define constant NONCE_SHIFT = 0x80

////////////////////////////////////////////////////////////////
//                 METADATA CONSTANTS                         //
////////////////////////////////////////////////////////////////
// ================== Decimals ===================
/// @dev METH has 18 decimals meaning a balance of `1120000000000000000` should be displayed as `1.12`.
#define constant DECIMALS = 0x12
// ==================== Name =====================
// name.length ++ "M"
#define constant PACKED_NAME_1        = 0x214d
#define constant PACKED_NAME_OFFSET_1 = 0x21
// "aximally Efficient Wrapped Ether"
#define constant PACKED_NAME_2        = 0x6178696d616c6c7920456666696369656e742057726170706564204574686572
#define constant PACKED_NAME_OFFSET_2 = 0x41
// =================== Symbol ====================
// symbol.length ++ "METH"
#define constant PACKED_SYMBOL_1 = 0x044d455448
#define constant PACKED_SYMBOL_OFFSET_1 = 0x24

/// @dev The only special privileges the recovery address should have is the ability to sweep funds from the zero and this addresses.
#define constant RECOVERY_ADDR = 0x1212121212121212121212121212121212121212

////////////////////////////////////////////////////////////////
//                      ERC712 CONSTANTS                      //
////////////////////////////////////////////////////////////////
#define constant ERC712_ENCODE_HEAD = 0x1901
// keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)")
#define constant ERC712_DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f
// keccak256("Maximally Efficient Wrapped Ether")
#define constant NAME_HASH = 0x6b9cc4b039c15ca6983e30e9ce1bbda1e4a82bcb7f7c783fb83f0ef373da695a
// keccak256("1")
#define constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6
#define constant DOMAIN_SEPARATOR_PLACEHOLDER = 0x4091cc981ab0391433dfcfc83900e539caf99b1ea50ebd1576d319483e4adeb4
// keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)")
#define constant PERMIT_TYPE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9


#define macro _REQUIRE_NOT_ZERO(zero) = takes(1) returns(1) {
    // takes:         [to]
    dup1           // [to, to]
    not_zero jumpi // [to]
        __FUNC_SIG(RecipientZero) _REVERT(<zero>)
    not_zero:      // [to]
    // returns:       [to]
}

#define macro _CLEAN_ADDRESS() = takes(1) returns(1) {
    // takes:             [calldata_pos]
    calldataload       // [addr_raw]
    [MAX_ADDR] and     // [addr]
    // returns:        // [addr]
}

#define macro _REVERT(zero) = takes(1) returns(0) {
    <zero> mstore
    0x04 0x1c revert
}

#define macro _RETURN_WORD(zero, word_size) = takes(1) returns(0) {
    // takes:                    [x]
                <zero> mstore // []
    <word_size> <zero> return // []
}

#define macro RETURN_TRUE(zero, word_size) = takes(0) returns(0) {
    0x1 _RETURN_WORD(<zero>, <word_size>)
}

#define macro _BUBBLE_REVERT(zero) = takes(1) returns(0) {
    // takes:             [success]
    no_bubble jumpi
        returndatasize <zero> <zero> returndatacopy
        returndatasize <zero> revert
    no_bubble:
}

#define macro PUSH_4_ZEROS(zero) = takes(0) returns(4) {
    <zero> <zero> <zero> <zero>     // [0, 0, 0, 0]
}

#define macro SEND_ETH(zero) = takes(6) returns(0) {
    // takes:                [recipient, amount, 0, 0, 0, 0]
    gas call              // [success]
    _BUBBLE_REVERT(<zero>) // []
    // returns:              []
}

// -- Internal Macros
#define macro LOAD_BALANCE() = takes(1) returns(1) {
    sload [BALANCE_MASK] and
}

#define macro EMIT_TRANSFER(zero, word_size) = takes(3) returns(0) {
    // takes:                 [amount, from, to]
    <zero> mstore          // [from, to]
    __EVENT_HASH(Transfer) // [Transfer.sig, from, to]
    <word_size> <zero> log3
}

#define macro _TRANSFER(zero, word_size) = takes(5) returns(0) {
    // takes:                  [from, amount, amount, from, to]

    // -- Update `from` Balance
    sload dup1              // [from.data, from.data, amount, amount, from, to]
    [BALANCE_MASK] and      // [from.bal, from.data, amount, amount, from, to]
    dup3                    // [amount, from.bal, from.data, amount, amount, from, to]
    gt insufficient_bal_error jumpi
    //                         [from.data, amount, amount, from, to]
    sub                     // [from.data', amount, from, to]
    dup3 sstore             // [amount, from, to]

    // -- Update `to` Balance
    dup3 sload              // [to.data, amount, from, to]
    dup2 add                // [to.data', amount, from, to]
    dup4 sstore             // [amount, from, to]

    EMIT_TRANSFER(<zero>, <word_size>)
}

#define macro WITHDRAW_ALL(zero) = takes(0) returns(1) {
    // takes:                          []
    // -- Update balance.
    caller sload                    // [msg.sender.data]
    dup1 [NONCE_MASK] and           // [msg.sender.data', msg.sender.data]
    caller sstore                   // [msg.sender.data]
    // -- Get amount and emit event.
    [BALANCE_MASK] and              // [amount]
    caller dup2                     // [amount, caller, amount]
    EMIT_WITHDRAWAL(<zero>, msize)  // [amount]
    // returns:                        [amount]
}

// -- External Functions
// ---- Metadata / Global Methods
#define macro NAME(zero) = takes(0) returns(0) {
    // Store string offset.
    0x20            <zero>                mstore
    // Write packed string data to memory, including length.
    [PACKED_NAME_1] [PACKED_NAME_OFFSET_1] mstore
    [PACKED_NAME_2] [PACKED_NAME_OFFSET_2] mstore
    msize           <zero>                 return
}

#define macro SYMBOL(zero) = takes(0) returns(0) {
    0x20              <zero>                   mstore
    [PACKED_SYMBOL_1] [PACKED_SYMBOL_OFFSET_1] mstore
    msize             <zero>                   return
}

#define macro DECIMALS(zero) = takes(0) returns(0) {
    [DECIMALS] _RETURN_WORD(<zero>, msize)
}

#define macro TOTAL_SUPPLY(zero) = takes(0) returns(0) {
    selfbalance _RETURN_WORD(<zero>, msize)
}

// ---- Transfer related methods
#define macro BALANCE_OF(zero) = takes(0) returns(0) {
    0x04 _CLEAN_ADDRESS() // [account]
    LOAD_BALANCE()        // [account.bal]
    _RETURN_WORD(<zero>, msize)
}

#define macro TRANSFER(zero) = takes(0) returns(0) {
    0x04 _CLEAN_ADDRESS() // [to]
    caller                // [msg.sender, to]
    0x24 calldataload     // [amount, msg.sender, to]
    dup1 caller           // [msg.sender, amount, amount, msg.sender, to]
    _TRANSFER(<zero>, msize)

    RETURN_TRUE(<zero>, msize)
}

#define macro APPROVE(zero) = takes(0) returns(0) {
    // -- Load & Verify Params
    0x04 _CLEAN_ADDRESS()   // [spender]
    0x24 calldataload      // [amount, spender]

    // -- Store approval
    caller msize  mstore   // [amount, spender]
    dup2   msize  mstore   // [amount, spender]
    dup1                   // [amount, amount, spender]
    0x40 <zero> sha3       // [allowance.slot, amount, amount, spender]
    sstore                 // [amount, spender]

    // -- Emit Event
    <zero> mstore          // [spender]
    caller                 // [owner, spender]
    __EVENT_HASH(Approval) // [Approval.sig, owner, spender]
    0x20 <zero> log3       // []
}

#define macro _APPROVE(zero) = takes(0) returns(0) {
    APPROVE(<zero>)

    RETURN_TRUE(<zero>, 0x20)
}

#define macro ALLOWANCE(zero) = takes(0) returns(0) {
    0x24 calldataload  // [spender]
    0x04 calldataload  // [owner, spender]
    msize mstore       // [spender]
    msize mstore       // []
    msize <zero> sha3  // [allowance.slot]
    sload              // [allowance]
    _RETURN_WORD(<zero>, 0x20)
}


// Actually "returns" 4 if jumping to `use_allowance_2pop`
/// @dev Checks and updates `from`'s allowance to caller
#define macro USE_ALLOWANCE(zero, use_allowance_2pop) = takes(2) returns(2) {
    // takes:               [amount, from]
    dup2   msize  mstore // [amount, from]
    caller msize  mstore // [amount, from]
    msize  <zero> sha3   // [allowance.slot, amount, from]
    dup1 sload           // [allowance, allowance.slot, amount, from]
    dup1 [INF_ALLOW_LIM] // [inf_allow_lim, allowance, allowance.slot, amount, from]
    lt <use_allowance_2pop> jumpi
    //                      [allowance, allowance.slot, amount, from]
    dup1 dup4            // [amount, allowance, allowance, allowance.slot, amount, from]
    gt insufficient_allowance_error jumpi
    //                      [allowance, allowance.slot, amount, from]
    dup3 swap1 sub       // [allowance', allowance.slot, amount, from]
    swap1 sstore         // [amount, from]
}

#define macro TRANSFER_FROM_END(zero, word_size) = takes(3) returns(0) {
    // takes:             [amount, from, to]
    dup1 dup3          // [from, amount, amount, from, to]
    _TRANSFER(<zero>, <word_size>)
    RETURN_TRUE(<zero>, <word_size>)
}

#define macro TRANSFER_FROM(zero) = takes(0) returns(0) {
    // -- Load & Verify Params.
    0x24 _CLEAN_ADDRESS() // [to]
    0x04 calldataload    // [from, to]
    0x44 calldataload    // [amount, from, to]

    // -- Verify Allowance
    USE_ALLOWANCE(<zero>, transfer_from_allowed_2pop)
        //                  [amount, from, to]
        TRANSFER_FROM_END(<zero>, 0x20)
    transfer_from_allowed_2pop:
        //                [_, _, amount, from, to]
        pop pop        // [amount, from, to]
        TRANSFER_FROM_END(<zero>, 0x20)
}

#define macro EMIT_DEPOSIT(zero, word_size) = takes(1) returns(0) {
    // takes:                  [to]
    callvalue <zero> mstore // [to]
    __EVENT_HASH(Deposit)   // [Deposit.sig, to]
    <word_size> <zero> log2 // []
}

#define macro DEPOSIT(zero) = takes(0) returns(0) {
    caller sload            // [msg.sender.data]
    // Would need 3.4 x 10^20 ETH to overflow into nonce.
    callvalue add           // [msg.sender.data']
    caller sstore           // []
    caller EMIT_DEPOSIT(<zero>, msize)
}

#define macro DEPOSIT(zero) = takes(0) returns(0) {
    DEPOSIT(<zero>)
    stop
}

#define macro DEPOSIT_TO(zero) = takes(0) returns(0) {
    // -- Load params.
    0x04 _CLEAN_ADDRESS()    // [to]
    dup1 sload              // [to.bal, to]
    // Would need 3.4 x 10^20 ETH to overflow into nonce.
    callvalue add           // [to.bal', to]
    dup2 sstore             // [to]
    EMIT_DEPOSIT(<zero>, msize)
    stop
}

#define macro DEPOSIT_AND_APPROVE(zero) = takes(0) returns(0) {
    DEPOSIT(<zero>)
    APPROVE(<zero>)
    stop
}

#define macro EMIT_WITHDRAWAL(zero, word_size) = takes(2) returns(0) {
    // takes:                   [amount, from]
    <zero> mstore            // [from]
    __EVENT_HASH(Withdrawal) // [Withdrawal.sig, from]
    <word_size> <zero> log2  // []
}

#define macro BURN_FROM_CALLER(zero) = takes(2) returns(0) {
    // takes:                [amount, msg.sender]

    // -- Update Balance
    dup1                  // [amount, amount, msg.sender]
    caller sload          // [msg.sender.data, amount, amount, msg.sender]
    dup1                  // [msg.sender.data, msg.sender.data, amount, amount, msg.sender]
    [BALANCE_MASK] and    // [msg.sender.bal, msg.sender.data, amount, amount, msg.sender]
    dup3                  // [amount, msg.sender.bal, msg.sender.data, amount, amount, msg.sender]
    gt insufficient_bal_error jumpi
    //                       [msg.sender.data, amount, amount, msg.sender]
    sub                   // [msg.sender.data', amount, msg.sender]
    caller sstore         // [amount, msg.sender]

    EMIT_WITHDRAWAL(<zero>, msize)
}

#define macro WITHDRAW(zero) = takes(0) returns(0) {
    PUSH_4_ZEROS(<zero>)     // [0, 0, 0, 0]
    0x04 calldataload        // [amount, 0, 0, 0, 0]
    caller dup2              // [amount, msg.sender, amount, 0, 0, 0, 0]
    BURN_FROM_CALLER(<zero>) // [amount, 0, 0, 0, 0]
    caller                   // [msg.sender, amount, 0, 0, 0, 0]
    SEND_ETH(<zero>)         // []
    stop
}

#define macro WITHDRAW_TO(zero) = takes(0) returns(0) {
    // -- Setup stack.
    PUSH_4_ZEROS(<zero>)     // [0, 0, 0, 0]
    0x24 calldataload        // [amount, 0, 0, 0, 0]
    caller dup2              // [amount, msg.sender, amount, 0, 0, 0, 0]
    // -- Update balance and emit event.
    BURN_FROM_CALLER(<zero>) // [amount, 0, 0, 0, 0]
    // -- Transfer ETH
    0x04 calldataload        // [to, amount, 0, 0, 0, 0]
    SEND_ETH(<zero>)         // []
    stop
}

#define macro WITHDRAW_ALL(zero) = takes(0) returns(0) {
    // -- Setup stack.
    PUSH_4_ZEROS(<zero>) // [0, 0, 0, 0]
    // -- Update balance and emit event.
    WITHDRAW_ALL(<zero>) // [amount, 0, 0, 0, 0]
    // -- Transfer ETH.
    caller               // [msg.sender, amount, 0, 0, 0, 0]
    SEND_ETH(<zero>)     // []
    stop
}

#define macro WITHDRAW_ALL_TO(zero) = takes(0) returns(0) {
    // Push zeros before to avoid swaps later.
    PUSH_4_ZEROS(<zero>)      // [0, 0, 0, 0]
    // -- Update balance and emit event.
    WITHDRAW_ALL(<zero>)      // [amount, 0, 0, 0, 0]
    // -- Transfer ETH.
    0x04 calldataload         // [to, amount, 0, 0, 0, 0]
    _REQUIRE_NOT_ZERO(<zero>) // [to, amount, 0, 0, 0, 0]
    SEND_ETH(<zero>)          // []
    stop
}

#define macro BURN_FROM(zero) = takes(2) returns(0) {
    // takes:                   [amount, from]

    // -- Update Balance
    dup1                     // [amount, amount, from]
    dup3 sload               // [from.data, amount, amount, from]
    dup1                     // [from.data, from.data, amount, amount]
    [BALANCE_MASK] and       // [from.bal, from.data, amount, amount]
    dup3                     // [amount, from.bal, from.data, amount, amount]
    gt insufficient_bal_error jumpi
    //                          [from.data, amount, amount, from]
    sub                      // [from.data', amount, from]
    dup3 sstore              // [amount, from]

    // -- Emit Withdrawal
    <zero> mstore            // [from]
    __EVENT_HASH(Withdrawal) // [Transfer.sig, from]
    0x20 <zero> log2         // []

    // returns:                 []
}

#define macro WITHDRAW_FROM(zero) = takes(7) returns(0) {
    // takes:             [amount, from, amount, 0, 0, 0, 0]

    BURN_FROM(<zero>)  // [amount, 0, 0, 0, 0]
    caller             // [msg.sender, amount, 0, 0, 0, 0]
    SEND_ETH(<zero>)   // []
}

#define macro WITHDRAW_FROM(zero) = takes(0) returns(0) {
    // -- Load & Verify Params.
    PUSH_4_ZEROS(<zero>)    // [0, 0, 0, 0]
    0x24 calldataload       // [amount, 0, 0, 0, 0]
    0x04 calldataload       // [from, amount, 0, 0, 0, 0]
    dup2                    // [amount, from, amount, 0, 0, 0, 0]

    USE_ALLOWANCE(<zero>, withdraw_from_allowed_2pop)
        //                     [amount, from, amount, 0, 0, 0, 0]
        WITHDRAW_FROM(<zero>)
        stop
    withdraw_from_allowed_2pop:
        //                     [_, _, amount, from, amount, 0, 0, 0, 0]
        pop pop             // [amount, from, amount, 0, 0, 0, 0]
        WITHDRAW_FROM(<zero>)
        stop
}

#define macro WITHDRAW_FROM_TO(zero) = takes(7) returns(0) {
    // takes:                    [amount, from, amount, 0, 0, 0, 0]

    BURN_FROM(<zero>)         // [amount, 0, 0, 0, 0]
    0x24 calldataload         // [to, amount, 0, 0, 0, 0]
    SEND_ETH(<zero>)          // []
}

#define macro WITHDRAW_FROM_TO(zero) = takes(0) returns(0) {
    // Load & Verify Params.

    PUSH_4_ZEROS(<zero>)    // [0, 0, 0, 0]
    0x04 calldataload       // [from, 0, 0, 0, 0]
    0x44 calldataload       // [amount, from, 0, 0, 0, 0]
    dup2                    // [amount, from, amount, 0, 0, 0, 0]

    USE_ALLOWANCE(<zero>, withdraw_from_to_allowed_2pop)
        //                     [amount, from, amount, 0, 0, 0, 0]
        WITHDRAW_FROM_TO(<zero>)
        stop
    withdraw_from_to_allowed_2pop:
        //                     [_, _, amount, from, amount, 0, 0, 0, 0]
        pop pop             // [amount, from, amount, 0, 0, 0, 0]
        WITHDRAW_FROM_TO(<zero>)
        stop
}

#define macro _IS_FORK() = takes(0) returns(1) {
    [TARGET_CHAIN_ID] chainid sub
}

#define macro DOMAIN_SEPARATOR(zero) = takes(0) returns(0) {
    _IS_FORK() fork_error jumpi
    [DOMAIN_SEPARATOR_PLACEHOLDER] _RETURN_WORD(<zero>, msize)
}

#define macro NONCES(zero) = takes(0) returns(0) {
    0x04 _CLEAN_ADDRESS() // [account]
    sload                 // [account.data]
    [NONCE_SHIFT] shr     // [account.nonce]
    _RETURN_WORD(<zero>, msize)
}

#define macro PERMIT(zero) = takes(0) returns(0) {
    0x04 calldataload               // [owner]
    0x24 calldataload               // [spender, owner]
    0x44 calldataload               // [allowance, spender, owner]
    0x64 calldataload               // [deadline, allowance, spender, owner]

    dup1 timestamp gt               // [block.timestamp > deadline, deadline, allowance, spender, owner]
    permit_expired_error jumpi      // [deadline, allowance, spender, owner]

    // -- Prepare Basic Permit Params
    [PERMIT_TYPE_HASH] msize mstore // [deadline, allowance, spender, owner]
    dup4               msize mstore // [deadline, allowance, spender, owner]
    dup3               msize mstore // [deadline, allowance, spender, owner]
    dup2               msize mstore // [deadline, allowance, spender, owner]
    // -- Prepare and Update Nonce
    dup4 sload                      // [owner.data, deadline, allowance, spender, owner]
    dup1 [NONCE_SHIFT] shr          // [owner.nonce, owner.data, deadline, allowance, spender, owner]
    /***/              msize mstore // [owner.data, deadline, allowance, spender, owner]
    [NONCE_INCREMENT] add           // [owner.data', deadline, allowance, spender, owner]
    dup5 sstore                     // [deadline, allowance, spender, owner]
    // -- Add Last Param (deadline)
    /***/              msize mstore // [allowance, spender, owner]

    // -- Update Allowance
    0x40 0x20 sha3                   // [allowance.slot, allowance, spender, owner]
    sstore                           // [spender, owner]
    dup2 __EVENT_HASH(Approval)      // [Approval.sig, owner, spender, owner]
    0x20 0x60 log3                   // [owner]

    // -- Calculate Message Hash
    msize <zero> sha3                // [permit_struct_hash, owner]
    // Constructor ensures code is padded such that length is exatly 0x1901.
    [ERC712_ENCODE_HEAD]         <zero> mstore
    [DOMAIN_SEPARATOR_PLACEHOLDER] 0x20 mstore
    //                                  [permit_struct_hash, owner]
    0x40 mstore                      // [owner]
    0x42 0x1e sha3                   // [encoded_struct, owner]

    // -- Verify Signature
    <zero> mstore                    // [owner]
    // Copy v, r, s at once into memory.
    0x60 0x84 0x20 calldatacopy      // [owner]
    0x20 <zero> 0x80 <zero>          // [0, 0x80, 0, 0x20, owner]
    chainid                          // [ecrecover_precompile_addr, 0, 0x80, 0, 0x20, owner]
    gas staticcall                   // [success, owner]
    pop                              // [owner]
     // If ecrecover failed no data will be returned and mem[0:0x20] will be the message hash.
    <zero> mload                     // [recovered_signer, owner]
    // Bypassing check requires collision between owner address and message hash.
    sub                              // [owner != recovered_signer]
    // Prevent cross-chain replays.
    _IS_FORK() or                    // [is_fork || owner != recovered_signer]
    invalid_signature_error jumpi    // []
    stop
}

#define macro MULTICALL(zero) = takes(0) returns(0) {
    0x04 calldataload                // [base_offset]
    0x20 sub                         // [base_offset != 0x20]
    empty_revert jumpi

    0x24 calldataload                // [total_calls]

    // Prepare header return data
    0x20 <zero> mstore               // [total_calls]
    dup1  msize mstore               // [total_calls]

    dup1 multicall_loop_start jumpi
        // Return empty array if length == 0.
        msize <zero> return
    multicall_loop_start:
        //                              [total_calls]
        dup1 0x5 shl 0x40 add        // [ret_data_pointer, total_calls]
        0x40                         // [res_offset_pointer, ret_data_pointer, total_calls]
        0x24                         // [call_pointer, res_offset_pointer, ret_data_pointer, total_calls]
    multicall_loop_continue:
        // Move call pointer to next call.
        0x20 add                     // [call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Load call position (call_offset = calldataload(call_pointer) + 0x44).
        dup1 calldataload 0x44 add   // [call_offset, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Load call size.
        dup1 calldataload            // [call_size, call_offset, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Copy call data to memory.
        dup1 swap2                   // [call_offset, call_size, call_size, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        0x20 add                     // [call_data_start, call_size, call_size, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        dup6                         // [ret_data_pointer, call_data_start, call_size, call_size, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        calldatacopy                 // [call_size, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Do self-delegatecall.
        <zero> <zero>                // [0, 0, call_size, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        swap2                        // [call_size, 0, 0, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        dup6                         // [ret_data_pointer, call_size, 0, 0, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        address gas delegatecall     // [success, call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        _BUBBLE_REVERT(<zero>)       // [call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Store return offset for returndata.
        swap1                        // [res_offset_pointer, call_pointer, ret_data_pointer, calls_left]
        0x40 dup4 sub                // [rel_ret_offset, res_offset_pointer, call_pointer, ret_data_pointer, calls_left]
        dup2 mstore                  // [res_offset_pointer, call_pointer, ret_data_pointer, calls_left]
        // Move result offset pointer for next loop.
        0x20 add                     // [res_offset_pointer, call_pointer, ret_data_pointer, calls_left]
        swap1                        // [call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Store returndatasize.
        swap2                        // [ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        returndatasize dup2 mstore   // [ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        // Move returndata pointer for returndata. 
        0x20 add                     // [ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        // Copy returndata into memory.
        returndatasize <zero>        // [0, rdz, ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        dup3                         // [ret_data_pointer, 0, rdz, ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        returndatacopy               // [ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        // The returndata of all successful functions is a multiple of 0x20 so no zero padding and word alignment necessary.
        // Move returndata pointer to be right after last returndata.
        returndatasize add           // [ret_data_pointer, res_offset_pointer, call_pointer, calls_left]
        swap2                        // [call_pointer, res_offset_pointer, ret_data_pointer, calls_left]
        // Decrement loop left `calls_left` counter.
        swap3                        // [calls_left, res_offset_pointer, ret_data_pointer, call_pointer]
        [MAX_UINT] add               // [calls_left', res_offset_pointer, ret_data_pointer, call_pointer]
        swap3                        // [call_pointer, res_offset_pointer, ret_data_pointer, calls_left']
        // Jump to next loop.
        dup4 multicall_loop_continue jumpi
    //                                  [call_pointer, res_offset_pointer, ret_data_pointer, 0]
    swap2                            // [res_offset_pointer, ret_data_pointer, call_pointer, 0]
    <zero> return
}

#define macro RESCUE_LOST(zero) = takes(0) returns(0) {
    // Load lost tokens.
    <zero>  LOAD_BALANCE()       // [0.bal]
    address LOAD_BALANCE()       // [this.balance, 0.bal]
    // Emit Transfer events.
    [RECOVERY_ADDR] <zero> dup4  // [0.bal, 0, recovery_addr, this.balance, 0.bal]
    EMIT_TRANSFER(<zero>, msize) // [this.balance, 0.bal]
    [RECOVERY_ADDR] address dup3 // [this.balance, this, recovery_addr, this.balance, 0.bal]
    EMIT_TRANSFER(<zero>, msize) // [this.balance, 0.bal]
    // Increase the balance of the rescue address.
    add                          // [total_lost]
    [RECOVERY_ADDR] sload        // [recovery_addr.data, total_lost]
    add                          // [recovery_addr.data']
    [RECOVERY_ADDR] sstore       // []
    // Reset balance of "lost accounts" to 0.
    <zero> <zero>  sstore        // []
    <zero> address sstore        // []
    // Send ETH to rescue address
    stop
}

#define macro COMPUTE_ERC712_DOMAIN_SEPARATOR() = takes(0) returns(1) {
    [ERC712_DOMAIN_HASH] msize mstore
    [NAME_HASH]          msize mstore
    [VERSION_HASH]       msize mstore
    chainid              msize mstore
    address              msize mstore
    msize 0x00 sha3
}

/// @dev Constructor not as optimized as it could be for the sake of favoring correctness over deployment cost
#define macro CONSTRUCTOR() = takes(0) returns(0) {
    [TARGET_CHAIN_ID] chainid eq
    expected_chain jumpi
        0x0 0x0 revert
    expected_chain:
    COMPUTE_ERC712_DOMAIN_SEPARATOR()
    __codesize(CONSTRUCTOR) dup1
    //                       [cstr_size, cstr_size, domain_separator]
    codesize              // [deploy_size, cstr_size, cstr_size, domain_separator]
    sub                   // [runtime_size, cstr_size, domain_separator]
    dup1 swap2            // [cstr_size, runtime_size, runtime_size, domain_separator]
    0x0                   // [0, cstr_size, runtime_size, runtime_size, domain_separator]
    codecopy              // [runtime_size, domain_separator]
    swap1                 // [domain_separator, runtime_size]
    dup1 [DS_LOC1] mstore // [domain_separator, runtime_size]
         [DS_LOC2] mstore // [runtime_size]
    returndatasize return
}

#define macro SELECTOR(zero) = takes(0) returns(1) {
    <zero> calldataload 0xe0 shr
}

#define macro PAYABLE_FUNC_CHECK(selector, final_dest) = takes(1) returns(0) {
    <selector> eq <final_dest> jumpi
    returndatasize returndatasize revert
    // Padding to make sure block is 16 bytes large post compilation.
    stop stop
    /*
    JUMPDEST          PUSH4             SELECTOR_BYTE_1   SELECTOR_BYTE_2
    SELECTOR_BYTE_3   SELECTOR_BYTE_4   EQ                PUSH2
    DEST_BYTE_1       DEST_BYTE_2       JUMPI             RETURNDATASIZE
    RETURNDATASIZE    REVERT            STOP              STOP
    */
}

#define macro NON_PAYABLE_FUNC_CHECK(selector, final_dest) = takes(1) returns(0) {
    <selector> eq callvalue lt <final_dest> jumpi
    returndatasize returndatasize revert
    /*
    No padding as non-payable check block is exactly 16-bytes large post-compile:
    JUMPDEST          PUSH4             SELECTOR_BYTE_1   SELECTOR_BYTE_2
    SELECTOR_BYTE_3   SELECTOR_BYTE_4   EQ                CALLVALUE
    LT                PUSH2             DEST_BYTE_1       DEST_BYTE_2
    JUMPI             RETURNDATASIZE    RETURNDATASIZE    REVERT
    */
}

#define macro NO_MATCH() = takes(0) returns(0) {
    returndatasize returndatasize revert
    // Padding to make sure block is 16 bytes large post compilation.
    stop stop stop stop
    stop stop stop stop
    stop stop stop stop
    /*
    JUMPDEST          RETURNDATASIZE    RETURNDATASIZE    REVERT
    STOP              STOP              STOP              STOP
    STOP              STOP              STOP              STOP
    STOP              STOP              STOP              STOP
    */
}

#define macro RECEIVE_CHECK(deposit_dest) = takes(0) returns(0) {
    calldatasize iszero <deposit_dest> jumpi
    returndatasize returndatasize revert
    // Padding to make sure block is 16 bytes large post compilation.
    stop stop stop stop stop stop
    /*
    JUMPDEST          CALLDATASIZE      ISZERO            PUSH2
    DEST_BYTE_1       DEST_BYTE_2       JUMPI             RETURNDATASIZE
    RETURNDATASIZE    REVERT            STOP              STOP
    STOP              STOP              STOP              STOP
    */
}

#define macro _MAIN(zero) = takes(0) returns(0) {
    // Load selector.
    SELECTOR(pc)
    // Isolate unique selector bits.
    dup1 [S_SHIFT] shr
    // Set lower bits to 1 to ensure alternative selectors also jump to valid destinations.
    [S_COVER] or
    jump

    // Padding to make sure jump dests start at the right offset.
    stop stop

    dest_0x00f: RECEIVE_CHECK(deposit_final_dest)
    dest_0x01f: NO_MATCH()
    dest_0x02f: NO_MATCH()
    dest_0x03f: NO_MATCH()
    dest_0x04f: NO_MATCH()
    dest_0x05f: NO_MATCH()
    dest_0x06f: NON_PAYABLE_FUNC_CHECK(0x06fdde03, name_final_dest)
    dest_0x07f: NO_MATCH()
    dest_0x08f: NO_MATCH()
    dest_0x09f: NON_PAYABLE_FUNC_CHECK(0x095ea7b3, approve_final_dest)
    dest_0x0af: NO_MATCH()
    dest_0x0bf: NO_MATCH()
    dest_0x0cf: NO_MATCH()
    dest_0x0df: NO_MATCH()
    dest_0x0ef: NO_MATCH()
    dest_0x0ff: NO_MATCH()
    dest_0x10f: NO_MATCH()
    dest_0x11f: NO_MATCH()
    dest_0x12f: NO_MATCH()
    dest_0x13f: NO_MATCH()
    dest_0x14f: NO_MATCH()
    dest_0x15f: NO_MATCH()
    dest_0x16f: NO_MATCH()
    dest_0x17f: NO_MATCH()
    dest_0x18f: NON_PAYABLE_FUNC_CHECK(0x18160ddd, totalSupply_final_dest)
    dest_0x19f: NO_MATCH()
    dest_0x1af: NO_MATCH()
    dest_0x1bf: NO_MATCH()
    dest_0x1cf: NO_MATCH()
    dest_0x1df: NO_MATCH()
    dest_0x1ef: NO_MATCH()
    dest_0x1ff: NO_MATCH()
    dest_0x20f: NON_PAYABLE_FUNC_CHECK(0x205c2878, withdrawTo_final_dest)
    dest_0x21f: NO_MATCH()
    dest_0x22f: NO_MATCH()
    dest_0x23f: NON_PAYABLE_FUNC_CHECK(0x23b872dd, transferFrom_final_dest)
    dest_0x24f: NO_MATCH()
    dest_0x25f: NO_MATCH()
    dest_0x26f: NO_MATCH()
    dest_0x27f: NO_MATCH()
    dest_0x28f: PAYABLE_FUNC_CHECK(0x28026ace, depositAndApprove_final_dest)
    dest_0x29f: NO_MATCH()
    dest_0x2af: NO_MATCH()
    dest_0x2bf: NO_MATCH()
    dest_0x2cf: NO_MATCH()
    dest_0x2df: NO_MATCH()
    dest_0x2ef: NON_PAYABLE_FUNC_CHECK(0x2e1a7d4d, withdraw_final_dest)
    dest_0x2ff: NO_MATCH()
    dest_0x30f: NO_MATCH()
    dest_0x31f: NON_PAYABLE_FUNC_CHECK(0x313ce567, decimals_final_dest)
    dest_0x32f: NO_MATCH()
    dest_0x33f: NO_MATCH()
    dest_0x34f: NO_MATCH()
    dest_0x35f: NO_MATCH()
    dest_0x36f: NON_PAYABLE_FUNC_CHECK(0x3644e515, DOMAIN_SEPARATOR_final_dest)
    dest_0x37f: NO_MATCH()
    dest_0x38f: NO_MATCH()
    dest_0x39f: NO_MATCH()
    dest_0x3af: NO_MATCH()
    dest_0x3bf: NO_MATCH()
    dest_0x3cf: NO_MATCH()
    dest_0x3df: NO_MATCH()
    dest_0x3ef: NO_MATCH()
    dest_0x3ff: NO_MATCH()
    dest_0x40f: NO_MATCH()
    dest_0x41f: NO_MATCH()
    dest_0x42f: NO_MATCH()
    dest_0x43f: NO_MATCH()
    dest_0x44f: NO_MATCH()
    dest_0x45f: NO_MATCH()
    dest_0x46f: NON_PAYABLE_FUNC_CHECK(0x4648b24c, rescueLost_final_dest)
    dest_0x47f: NO_MATCH()
    dest_0x48f: NO_MATCH()
    dest_0x49f: NO_MATCH()
    dest_0x4af: NON_PAYABLE_FUNC_CHECK(0x4a4089cc, withdrawFromTo_final_dest)
    dest_0x4bf: NO_MATCH()
    dest_0x4cf: NO_MATCH()
    dest_0x4df: NO_MATCH()
    dest_0x4ef: NO_MATCH()
    dest_0x4ff: NO_MATCH()
    dest_0x50f: NO_MATCH()
    dest_0x51f: NO_MATCH()
    dest_0x52f: NO_MATCH()
    dest_0x53f: NO_MATCH()
    dest_0x54f: NO_MATCH()
    dest_0x55f: NO_MATCH()
    dest_0x56f: NO_MATCH()
    dest_0x57f: NO_MATCH()
    dest_0x58f: NO_MATCH()
    dest_0x59f: NO_MATCH()
    dest_0x5af: NO_MATCH()
    dest_0x5bf: NO_MATCH()
    dest_0x5cf: NO_MATCH()
    dest_0x5df: NO_MATCH()
    dest_0x5ef: NO_MATCH()
    dest_0x5ff: NO_MATCH()
    dest_0x60f: NO_MATCH()
    dest_0x61f: NO_MATCH()
    dest_0x62f: NO_MATCH()
    dest_0x63f: NO_MATCH()
    dest_0x64f: NO_MATCH()
    dest_0x65f: NO_MATCH()
    dest_0x66f: NO_MATCH()
    dest_0x67f: NO_MATCH()
    dest_0x68f: NO_MATCH()
    dest_0x69f: NO_MATCH()
    dest_0x6af: NO_MATCH()
    dest_0x6bf: NO_MATCH()
    dest_0x6cf: NO_MATCH()
    dest_0x6df: NO_MATCH()
    dest_0x6ef: NO_MATCH()
    dest_0x6ff: NO_MATCH()
    dest_0x70f: NON_PAYABLE_FUNC_CHECK(0x70a08231, balanceOf_final_dest)
    dest_0x71f: NO_MATCH()
    dest_0x72f: NO_MATCH()
    dest_0x73f: NO_MATCH()
    dest_0x74f: NO_MATCH()
    dest_0x75f: NO_MATCH()
    dest_0x76f: NO_MATCH()
    dest_0x77f: NO_MATCH()
    dest_0x78f: NO_MATCH()
    dest_0x79f: NO_MATCH()
    dest_0x7af: NO_MATCH()
    dest_0x7bf: NO_MATCH()
    dest_0x7cf: NO_MATCH()
    dest_0x7df: NO_MATCH()
    dest_0x7ef: NON_PAYABLE_FUNC_CHECK(0x7ecebe00, nonces_final_dest)
    dest_0x7ff: NO_MATCH()
    dest_0x80f: NO_MATCH()
    dest_0x81f: NO_MATCH()
    dest_0x82f: NO_MATCH()
    dest_0x83f: NO_MATCH()
    dest_0x84f: NO_MATCH()
    dest_0x85f: NON_PAYABLE_FUNC_CHECK(0x853828b6, withdrawAll_final_dest)
    dest_0x86f: NO_MATCH()
    dest_0x87f: NO_MATCH()
    dest_0x88f: NO_MATCH()
    dest_0x89f: NO_MATCH()
    dest_0x8af: NO_MATCH()
    dest_0x8bf: NO_MATCH()
    dest_0x8cf: NO_MATCH()
    dest_0x8df: NO_MATCH()
    dest_0x8ef: NO_MATCH()
    dest_0x8ff: NO_MATCH()
    dest_0x90f: NO_MATCH()
    dest_0x91f: NO_MATCH()
    dest_0x92f: NO_MATCH()
    dest_0x93f: NO_MATCH()
    dest_0x94f: NON_PAYABLE_FUNC_CHECK(0x9470b0bd, withdrawFrom_final_dest)
    dest_0x95f: NON_PAYABLE_FUNC_CHECK(0x95d89b41, symbol_final_dest)
    dest_0x96f: NO_MATCH()
    dest_0x97f: NO_MATCH()
    dest_0x98f: NO_MATCH()
    dest_0x99f: NO_MATCH()
    dest_0x9af: NO_MATCH()
    dest_0x9bf: NO_MATCH()
    dest_0x9cf: NO_MATCH()
    dest_0x9df: NO_MATCH()
    dest_0x9ef: NO_MATCH()
    dest_0x9ff: NO_MATCH()
    dest_0xa0f: NO_MATCH()
    dest_0xa1f: NO_MATCH()
    dest_0xa2f: NO_MATCH()
    dest_0xa3f: NO_MATCH()
    dest_0xa4f: NO_MATCH()
    dest_0xa5f: NO_MATCH()
    dest_0xa6f: NO_MATCH()
    dest_0xa7f: NO_MATCH()
    dest_0xa8f: NO_MATCH()
    dest_0xa9f: NON_PAYABLE_FUNC_CHECK(0xa9059cbb, transfer_final_dest)
    dest_0xaaf: NO_MATCH()
    dest_0xabf: NO_MATCH()
    dest_0xacf: NON_PAYABLE_FUNC_CHECK(0xac9650d8, multicall_final_dest)
    dest_0xadf: NO_MATCH()
    dest_0xaef: NO_MATCH()
    dest_0xaff: NO_MATCH()
    dest_0xb0f: NO_MATCH()
    dest_0xb1f: NO_MATCH()
    dest_0xb2f: NO_MATCH()
    dest_0xb3f: NO_MATCH()
    dest_0xb4f: NO_MATCH()
    dest_0xb5f: NO_MATCH()
    dest_0xb6f: NO_MATCH()
    dest_0xb7f: PAYABLE_FUNC_CHECK(0xb760faf9, depositTo_final_dest)
    dest_0xb8f: NO_MATCH()
    dest_0xb9f: NO_MATCH()
    dest_0xbaf: NO_MATCH()
    dest_0xbbf: NO_MATCH()
    dest_0xbcf: NO_MATCH()
    dest_0xbdf: NO_MATCH()
    dest_0xbef: NO_MATCH()
    dest_0xbff: NO_MATCH()
    dest_0xc0f: NO_MATCH()
    dest_0xc1f: NO_MATCH()
    dest_0xc2f: NO_MATCH()
    dest_0xc3f: NO_MATCH()
    dest_0xc4f: NO_MATCH()
    dest_0xc5f: NO_MATCH()
    dest_0xc6f: NO_MATCH()
    dest_0xc7f: NO_MATCH()
    dest_0xc8f: NO_MATCH()
    dest_0xc9f: NO_MATCH()
    dest_0xcaf: NON_PAYABLE_FUNC_CHECK(0xca9add8f, withdrawAllTo_final_dest)
    dest_0xcbf: NO_MATCH()
    dest_0xccf: NO_MATCH()
    dest_0xcdf: NO_MATCH()
    dest_0xcef: NO_MATCH()
    dest_0xcff: NO_MATCH()
    dest_0xd0f: PAYABLE_FUNC_CHECK(0xd0e30db0, deposit_final_dest)
    dest_0xd1f: NO_MATCH()
    dest_0xd2f: NO_MATCH()
    dest_0xd3f: NO_MATCH()
    dest_0xd4f: NO_MATCH()
    dest_0xd5f: NON_PAYABLE_FUNC_CHECK(0xd505accf, permit_final_dest)
    dest_0xd6f: NO_MATCH()
    dest_0xd7f: NO_MATCH()
    dest_0xd8f: NO_MATCH()
    dest_0xd9f: NO_MATCH()
    dest_0xdaf: NO_MATCH()
    dest_0xdbf: NO_MATCH()
    dest_0xdcf: NO_MATCH()
    dest_0xddf: NON_PAYABLE_FUNC_CHECK(0xdd62ed3e, allowance_final_dest)
    dest_0xdef: NO_MATCH()
    dest_0xdff: NO_MATCH()
    dest_0xe0f: NO_MATCH()
    dest_0xe1f: NO_MATCH()
    dest_0xe2f: NO_MATCH()
    dest_0xe3f: NO_MATCH()
    dest_0xe4f: NO_MATCH()
    dest_0xe5f: NO_MATCH()
    dest_0xe6f: NO_MATCH()
    dest_0xe7f: NO_MATCH()
    dest_0xe8f: NO_MATCH()
    dest_0xe9f: NO_MATCH()
    dest_0xeaf: NO_MATCH()
    dest_0xebf: NO_MATCH()
    dest_0xecf: NO_MATCH()
    dest_0xedf: NO_MATCH()
    dest_0xeef: NO_MATCH()
    dest_0xeff: NO_MATCH()
    dest_0xf0f: NO_MATCH()
    dest_0xf1f: NO_MATCH()
    dest_0xf2f: NO_MATCH()
    dest_0xf3f: NO_MATCH()
    dest_0xf4f: NO_MATCH()
    dest_0xf5f: NO_MATCH()
    dest_0xf6f: NO_MATCH()
    dest_0xf7f: NO_MATCH()
    dest_0xf8f: NO_MATCH()
    dest_0xf9f: NO_MATCH()
    dest_0xfaf: NO_MATCH()
    dest_0xfbf: NO_MATCH()
    dest_0xfcf: NO_MATCH()
    dest_0xfdf: NO_MATCH()
    dest_0xfef: NO_MATCH()
    dest_0xfff: NO_MATCH()

    // Final function destinations.
    name_final_dest:
        NAME(<zero>)
    symbol_final_dest:
        SYMBOL(<zero>)
    decimals_final_dest:
        DECIMALS(<zero>)
    totalSupply_final_dest:
        TOTAL_SUPPLY(<zero>)
    transferFrom_final_dest:
        TRANSFER_FROM(<zero>)
    transfer_final_dest:
        TRANSFER(<zero>)
    balanceOf_final_dest:
        BALANCE_OF(<zero>)
    approve_final_dest:
        APPROVE(<zero>)
    allowance_final_dest:
        ALLOWANCE(<zero>)
    // For payable functions `RETURNDATASIZE` is used as 2 gas `PUSH0` instead of `CALLVALUE`
    deposit_final_dest:
        DEPOSIT(returndatasize)
    depositTo_final_dest:
        DEPOSIT_TO(returndatasize)
    depositAndApprove_final_dest:
        DEPOSIT_AND_APPROVE(returndatasize)
    withdraw_final_dest:
        WITHDRAW(<zero>)
    withdrawTo_final_dest:
        WITHDRAW_TO(<zero>)
    withdrawAll_final_dest:
        WITHDRAW_ALL(<zero>)
    withdrawAllTo_final_dest:
        WITHDRAW_ALL_TO(<zero>)
    withdrawFrom_final_dest:
        WITHDRAW_FROM(<zero>)
    withdrawFromTo_final_dest:
        WITHDRAW_FROM_TO(<zero>)
    DOMAIN_SEPARATOR_final_dest:
        DOMAIN_SEPARATOR(<zero>)
    nonces_final_dest:
        NONCES(<zero>)
    permit_final_dest:
        PERMIT(<zero>)
    multicall_final_dest:
        // Multicall does non-payable check so `callvalue` used as zero.
        MULTICALL(<zero>)
    rescueLost_final_dest:
        RESCUE_LOST(<zero>)

    // Errors.
    insufficient_bal_error:
        __FUNC_SIG(InsufficientBalance)
        _REVERT(<zero>)
    insufficient_allowance_error:
        __FUNC_SIG(InsufficientAllowance)
        _REVERT(<zero>)
    permit_expired_error:
        __FUNC_SIG(PermitExpired)
        _REVERT(<zero>)
    invalid_signature_error:
        __FUNC_SIG(InvalidSignature)
        _REVERT(<zero>)
    fork_error:
        __FUNC_SIG(Fork)
        _REVERT(<zero>)
    empty_revert:
        <zero> <zero> revert
}

#define macro MAIN() = takes(0) returns(0) {
    // `CALLVALUE` is checked to be zero as part of the non-payable function checks
    _MAIN(callvalue)
}
